c
return true if (( total % 11 ) == 0 )
total = 22
return true if total % 11 == 0
total % 11
total $ 11
total mod 11
total % 11
total = (0...array_A.count).inject(0) {|r, i| r + array_A[i]*array_B[i]}
(0...array_A.count).inject(0) {|r, i| r + array_A[i]*array_B[i]}
array_B = account_number.split('').to_a.map{|x|x.to_i}
array_A = [1,2,3,4,5,6,7,8,9]
array_b = account_number.split('').to_a.map{|x|x.to_i}
array_a = [1,2,3,4,5,6,7,8,9]
array = account_number.split('').to_a.map{|x|x.to_i}
account_number.split('').to_a.map{|x|x.to_i}
account_number.split('').to_a
account_number.split('')
account_number.split(',')
account_number.split()
account_number.to_a
account_number
account_number = self.parse_file(name) 
exit
arr.join("")
arr.join(",")
arr.map(&:to_s)
arr
exit
array.push(d9)
d9.push(array)
d9
d9 = convert_to_number(n0.to_s)
d9 = convert_to_number(n0.to_s).push(array)
array = []
d9 = convert_to_number(n0.to_s).push(array)
d9 = convert_to_number(n0.to_s)
%w(d9 d8 d7 d6 d5 d4 d3 d2 d1).map(&:to_s)
%w(d9 d8 d7 d6 d5 d4 d3 d2 d1)
d8
d9
exit
str_array = %w(d9 d8 d7 d6 d5 d4 d3 d2 d1).map(&:to_s)
str_array = %w(d9 d8 d7 d6 d5 d4 d3 d2 d1) .map(&:to_s)
%w(d9 d8 d7 d6 d5 d4 d3 d2 d1).int_array.map(&:to_s)
%w(d9 d8 d7 d6 d5 d4 d3 d2 d1)
%w(d9 d8 d7 d6 d5 d4 d3 d2 d1).to_s
%w(d9 d8 d7 d6 d5 d4 d3 d2 d1)
n
c
b
a
n
exit
%w(a)
a = convert_to_number(n0.to_s)
convert_to_number(n0.to_s)
n0.to_s
n0
exit
convert_to_number(n0.to_s)
convert_to_number
n0.to_s
n0.convert_to_number
n0
convert_to_number(n0)
self.convert_to_number(n0)
n2
n1
n0
c
self.convert_to_number(n0.to_s)
n0.to_s
n0
exit
array.to_s
array = [[" ", "_", " "], ["|", " ", "|"], ["|", "_", "|"]]
n0
exit
n0
exit
n0
exit
n0
exit
n0
exit
n0
exit
n0
exit
n0
exit
pretty_print(n0)
n0
exit
n1
n0
no
pretty_print(n0)
exit
pretty_print(n0)
n0
pretty_print(n0)
n0
exit
array
exit
array
exit
arr
array
exit
array = each_line_to_array(name)
exit
each_line_to_array(name)
exit
n3
n2
n3
n1
n0
c
cc
c
n1
n0
c
n0
index
c
n1
index
n0
exit
array.count
array
arrau
exit
arr
n2
n1
n0
c
n2
n1
n0
exit
 n0 << arr[index]
n0
arr[index]
arr
n1
n0
c
n1
n0
array
c
arr[index]
n0
index
arr
c
array
exit
array.first
array.count
array
c
n0
n1
exit
n0
exit
n0.push(element[index])
element[index]
index
n2
n1
exit
n[index] << element[index]
n[index]
element[index]
exit
element[0]
element
n1
element
index
element
index
exit
n2
n1
n1, n2, n3, n4, n5, n6, n7, n8, n9 = [], [], [], [], [], [], [], [], []
n1, n2, n3, n4, n5, n6, n7, n8, n9 = [], [], [], [], [], [], [], [], []\\
n1 = element[index] n1, n2, n3, n4, n5, n6, n7, n8, n9 = [], [], [], [], [], [], [], [], []
n1 = element[index] 
element[index]
element
exit
element[3]
element[2]
element[1]
element[0]
element
element[0]
element
element[0]
element
index
exit
index
i
exit
e[0]
e
exit
v
array.length
array
c
array
c
array
exit
line.chomp.split('').each_slice(3).to_a
"array#{index}" = line.chomp.split('').each_slice(3).to_a
array = line.chomp.split('').each_slice(3).to_a
index
exit
index
"array#{count}" = line.chomp.split('').each_slice(3).to_a
"arr#{count}"
arr"#{count}"
count = 0
arr = line.chomp.split('').each_slice(3).to_a
arr[4]
arr[3]
arr[2]
arr[1]
arr[0]
arr.length
arr.lengtj
arr.lenght
arr.class
arr
arr = line.chomp.split('').each_slice(3).to_a
line.chomp.split('').each_slice(3) {|a| p a}arr = line.chomp.split('').each_slice(3).to_a
line.chomp.split('').each_slice(3) {|a| p a}
line.chomp.slice(0,3)
d9_array = line.chomp.slice(0,3)
d9 = line.chomp.slice(0,3)
line.chomp
result.class
